from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai.flow.flow import Flow, start, listen, and_, or_
from pydantic import BaseModel,Field
from typing import List 

# If you want to run a snippet of code before or after the crew starts, 
# you can use the @before_kickoff and @after_kickoff decorators
# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators

# @CrewBase
# class IncogenExp():
# 	"""IncogenExp crew"""

# 	# Learn more about YAML configuration files here:
# 	# Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended
# 	# Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended
# 	agents_config = 'config/agents.yaml'
# 	tasks_config = 'config/tasks.yaml'

# 	# If you would like to add tools to your agents, you can learn more about it here:
# 	# https://docs.crewai.com/concepts/agents#agent-tools
# 	# @agent
# 	# def researcher(self) -> Agent:
# 	# 	return Agent(
# 	# 		config=self.agents_config['researcher'],
# 	# 		verbose=True
# 	# 	)

# 	# @agent
# 	# def reporting_analyst(self) -> Agent:
# 	# 	return Agent(
# 	# 		config=self.agents_config['reporting_analyst'],
# 	# 		verbose=True
# 	# 	)
	
# 	@agent
# 	def agent_one(self) -> Agent:
# 		return Agent(
# 			config=self.agents_config['agent_one'],
# 			verbose=True
# 		)

# 	# To learn more about structured task outputs, 
# 	# task dependencies, and task callbacks, check out the documentation:
# 	# https://docs.crewai.com/concepts/tasks#overview-of-a-task
# 	# @task
# 	# def research_task(self) -> Task:
# 	# 	return Task(
# 	# 		config=self.tasks_config['research_task'],
# 	# 	)

# 	# @task
# 	# def reporting_task(self) -> Task:
# 	# 	return Task(
# 	# 		config=self.tasks_config['reporting_task'],
# 	# 		output_file='report.md'
# 	# 	)
# 	@task
# 	def step_id_task(self) -> Task:
# 		return Task(
# 			config=self.tasks_config['step_id_task'],
# 			output_file='report.md'
# 		)

# 	@crew
# 	def crew(self) -> Crew:
# 		"""Creates the IncogenExp crew"""
# 		# To learn how to add knowledge sources to your crew, check out the documentation:
# 		# https://docs.crewai.com/concepts/knowledge#what-is-knowledge

# 		return Crew(
# 			agents=self.agents, # Automatically created by the @agent decorator
# 			tasks=self.tasks, # Automatically created by the @task decorator
# 			process=Process.sequential,
# 			verbose=True,
# 			# process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/
# 		)

class Ingredient(BaseModel):
	name: str 
	quantity: str
	# prompt: str = Field(description = "A prompt for text to image models that can be used to generate an image.", max_length = 50)
	image_url: str = Field(description = "Url to the image generated by the tool")

# Define a class for a list of story scenes
class IngredientList(BaseModel):
	ingredients: List[Ingredient]
    
class IngredientsFlow1(Flow):
	
	def __init__(self, data):
		super().__init__()
		self.state['input_text'] = data['input_text']
		self.state['final_list'] = list()
        
	@start()
	def extract_ingredients(self):  
		# Execute validation task with result
		# task_validate = Task(
		# 		description=f'Validate data: {data}. Criteria: score > 85 and age > 30.',
		# 		agent=dataValidationAgent,
		# 		expected_output=validation_result  # Expected output to indicate success or failure
		# )
			
		task_input = self.state['input_text']
		
		ingredient_extractor_agent = Agent(
      # config=agents_config['ingredient_extractor'],
      role="Ingredient Extractor",
      goal="Identify and extract ingredients along with their quantities from the given input text.",
      backstory='''You are a text-processing expert specializing in extracting structured data from unstructured text.
  Given a recipe ingredient list, you identify each ingredient and its associated quantity with high accuracy.''',
      verbose=True
			)

		igredient_extraction_task = Task(
			# config=tasks_config['ingredient_extraction_task'],
      description=f'''Analyze the given input text containing a list of ingredients.
      INPUT TEXT: {task_input}
      Your job is to extract each ingredient along with its quantity. Ensure that all ingredients 
      are correctly identified and formatted in a structured manner.''',
      agent=ingredient_extractor_agent,
			expected_output="A structured list of ingredients with quantities",  # Add this required field
      output_file="ingredients.json",  # Change to a string path
      output_pydantic=IngredientList
		)
		crew = Crew(
      agents=[ingredient_extractor_agent],
      tasks=[igredient_extraction_task],
      verbose=True,
      process=Process.sequential
		)
		result = crew.kickoff()
		print("GOT MY result",result)
        